package Trie;

/**
 * DO NOT EDIT THIS FILE.
 */
public interface TrieInterface<T> {
    /**
     * @param word  Word to be input in the Trie
     * @param value Associated value of the word
     * @return Success or failure
     */
    boolean insert(String word, T value);

    /**
     * @param word Search for this word, Case-Sensitive
     * @return Returns the Trienode associated if the word is found else NULL
     */
    TrieNode<T> search(String word);

    /**
     *
     * @param prefix Search a particular prefix
     * @return Returns the last Trienode associated with the prefix. Eg: If PARIS and PARROT is in the Tries, searching for PAR, returns the trienode of first R
     */
    TrieNode<T> startsWith(String prefix);

    /**
     *
     * @param trieNode Prints all the possible word possible from this Trienode
     *                Eg: PAR and PARIS, printTrie(startWith("PAR")) should print PARIS and PARROT i.e all the words with suffix PAR
     */
    void printTrie(TrieNode trieNode);

    /**
     *
     * @param word Delete a word from the Trie
     * @return Success or Failure
     */
    boolean delete(String word);

    /**
     * Print the complete Trie
     */
    void print();

    /**
     * Print a specific level of the Trie.
     *
     * @param level
     */
    void printLevel(int level);
}
